// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	post "social-media-app/feature/post"

	mock "github.com/stretchr/testify/mock"
)

// PostRepository is an autogenerated mock type for the PostRepository type
type PostRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: userID, newPost
func (_m *PostRepository) Create(userID uint, newPost post.Core) error {
	ret := _m.Called(userID, newPost)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, post.Core) error); ok {
		r0 = rf(userID, newPost)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: userID, postID
func (_m *PostRepository) Delete(userID uint, postID uint) error {
	ret := _m.Called(userID, postID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(userID, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *PostRepository) GetAll() ([]post.Core, error) {
	ret := _m.Called()

	var r0 []post.Core
	if rf, ok := ret.Get(0).(func() []post.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]post.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: postID
func (_m *PostRepository) GetByID(postID uint) (post.Core, error) {
	ret := _m.Called(postID)

	var r0 post.Core
	if rf, ok := ret.Get(0).(func(uint) post.Core); ok {
		r0 = rf(postID)
	} else {
		r0 = ret.Get(0).(post.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: userID
func (_m *PostRepository) GetByUserID(userID uint) ([]post.Core, error) {
	ret := _m.Called(userID)

	var r0 []post.Core
	if rf, ok := ret.Get(0).(func(uint) []post.Core); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]post.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MyPost provides a mock function with given fields: postID
func (_m *PostRepository) MyPost(postID uint) ([]post.Core, error) {
	ret := _m.Called(postID)

	var r0 []post.Core
	if rf, ok := ret.Get(0).(func(uint) []post.Core); ok {
		r0 = rf(postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]post.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userID, postID, updatePost
func (_m *PostRepository) Update(userID uint, postID uint, updatePost post.Core) error {
	ret := _m.Called(userID, postID, updatePost)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, post.Core) error); ok {
		r0 = rf(userID, postID, updatePost)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPostRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPostRepository creates a new instance of PostRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPostRepository(t mockConstructorTestingTNewPostRepository) *PostRepository {
	mock := &PostRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
